<template>
  <div class="container">
    <image for="{{dices}}" style="{{diceStyles[$idx]}}" class="dice-image di{{$idx}}" src="{{diceImgs[$item - 1]}}"></image>
    <div if="{{lessThenMin && played}}" class="results">
      <text class="straight">{{points}}点</text>
    </div>
    <div if="{{results.length === 1}}" class="results">
      <text class="straight">顺子, 全部 0 个</text>
    </div>
    <div else class="results">
      <div class="result" for="{{results}}" tid="dice">
        <text>{{$item.count}}x</text>
        <image class="dice-small" src="{{diceImgs[$item.dice - 1]}}"></image>
      </div>
    </div>
    <div class="ctrls">
      <!-- <picker class="picker-dice-number" @change="changePicker" :value="index" :range="supportDiceNumbers">
        <text>数量: {{supportDiceNumbers[index]}}</text>
      </picker> -->
      <div class="change" @click="changeDices">摇一摇</div>
      <div class="help" @click="clickHelp">?</div>
    </div>
  </div>
</template>

<script>
  import {
    dice1,
    dice2,
    dice3,
    dice4,
    dice5,
    dice6,
    button,
    diceConfig,
  } from './source.js'

  let rule = {
    supportDiceNumbers: [5, 6, 7, 8, 9, 4, 3, 2, 1],
    // 禁止变化, 防止多次
    close: false,
    // 两次最小间距时间
    closeTime: 0.25,
    // 摇一摇幅度
    range: 3,
    // 骰子最大值
    max: 6,
    // 可玩的最小值
    minCount: 5,
  }

  export default {
    public: {
      played: false,
      index: 0, //uni.getStorageSync('diceCountIndex') || 0,
      supportDiceNumbers: rule.supportDiceNumbers,
      button,
      dices: [],
      results: [],
      diceImgs: [dice1, dice2, dice3, dice4, dice5, dice6],
      diceConfig,
    },
    computed: {
      /**
       * 非摇骰子时候的点数
       */
      points() {
        let res = this.dices.reduce((pre, cur) => pre + cur, 0)
        return res
      },
      /**
       * 是否低于可玩的最小值
       */
      lessThenMin() {
        return this.diceCount < rule.minCount
      },
      diceCount: {
        get() {
          return this.supportDiceNumbers[this.index]
        }
      },
      diceStyles() {
        let diceConfig = this.diceConfig[this.diceCount],
          width = diceConfig.w,
          los = diceConfig.los,
          results = []
        los.forEach((lo, index) => {
          results.push(`left: ${width * lo.l / 2}px;top: ${width * lo.t / 2}px;`)
        })
        return results
      }
    },
    onReady() {
      this.initDices()
      this.listenShake()
    },
    onShareAppMessage() {
      return {
        title: '君子九个骰，小人瑟瑟抖。'
      }
    },
    changePicker(e) {
      let index = Number(e.detail.value)
      this.index = index
      this.initDices()
      this.results = []
      this.played = false
      // uni.setStorage({
      //   key: 'diceCountIndex',
      //   data: index,
      //   success(res) {
      //     // console.log('success')
      //   }
      // })
    },
    /**
     * 初始化骰子
     */
    initDices() {
      let dices = []
      for (let i = 0; i < this.diceCount; i++) {
        dices.push(6)
      }
      this.dices = dices
    },
    /**
     * 监听摇一摇
     */
    listenShake() {
      // return uni.onAccelerometerChange((res) => {
      //   let range = rule.range
      //   if (res.x > range || res.y > range || res.z > range) {
      //     return this.changeDices()
      //   }
      // })
    },
    /**
     * 改变骰子
     */
    changeDices() {
      if (rule.close) {
        return
      }
      this.played = true
      let newDices = []
      // 随机生成骰子
      for (let i = 0; i < this.diceCount; i++) {
        newDices.push(Math.floor(Math.random() * rule.max) + 1)
      }
      this.dices = newDices
      // 震动
      // uni.vibrateLong()

      // 如果数量少于最小值, 则当做普通骰子用
      if (this.lessThenMin) {
        return
      }

      this.handleDices(newDices)
      rule.close = true
      return setTimeout(() => rule.close = false, rule.closeTime * 1000)
    },
    /**
     * 处理骰子计分逻辑
     * @param {array} newDices - 新骰子数组, 用来计算返还给 this.dices
     * @return 返回 { dice: [number],count: [number] } 骰子与数量
     */
    handleDices(newDices) {
      let newResults = []
      // 去重查看是否是顺子
      if (Array.from(new Set(newDices)).length === this.diceCount) {
        newResults.push('顺子, 全部为 0 个')
      } else {
        // 1 的特殊处理
        let countOne = 0
        for (let i = 0; i < rule.max; i++) {
          let j = i + 1,
            countJ = this.howManyCount(j),
            diceCount = this.diceCount
          countJ = countJ === diceCount ? diceCount + 1 : countJ + countOne
          newResults.push({
            count: countJ,
            dice: j
          })
          // 1 要留下来充数
          if (j === 1) {
            countOne = countJ
          }
        }
      }
      this.results = newResults
    },
    /**
     * 计分逻辑
     * @param {number} point - 根据传进来的点数遍历所有骰子计算分数(所有数)
     * @return 返回有几个, 比如4个3
     */
    howManyCount(point) {
      let count = 0,
        dices = this.dices
      for (let i = 0; i < dices.length; i++) {
        let item = dices[i]
        if (item === point) {
          count++
        }
      }
      return count
    },
    clickHelp() {
      // uni.navigateTo({
      //   url: '/pages/help/index'
      // })
    },
  }
</script>

<style lang='less'>
  @width: 100px;
  @height: 92px;
  @top: 80px;
  .container {
    padding: 0;
  }

  .ctrls {
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-bottom: 120px;
    padding: 0 20px;
    font-size: 24px;
  }

  .picker-dice-number {
    width: @width;
    border: 2px dashed #d8d8d8;
    padding: 2px 4px;
  }

  .pick-remind {
    position: absolute;
    left: 0;
    top: -80px;
    width: 200px;
    font-size: 24px;
    color: #999;
  }

  .change {
    justify-content: center;
    align-items: center;
    width: 440px;
    height: @height;
    border-radius: 46px;
    background-color: #fc9d5d;
    color: white;
    font-size: 32px;
  }

  .change:active {
  }

  .dices {
    justify-content: space-between;
    align-content: space-between;
    flex-wrap: wrap;
    width: 400px;
    height: 400px;
  }

  .dice {
    position: absolute;
  }

  .dice-image {
    position: absolute;
    width: @width;
    height: @width;
    object-fit: cover;
  }

  .di0 {
    top: 10px;
    left: 10px;
  }
  .di1 {
    top: 10px;
    left: 10px;
  }
  .di2 {
    top: 10px;
    left: 10px;
  }
  .di3 {
    top: 10px;
    left: 10px;
  }
  .di4 {
    top: 10px;
    left: 10px;
  }

  .results {
    justify-content: space-around;
    width: 100%;
    border-left: 0;
    border-bottom: 0;
  }

  .straight {
    line-height: 96px;
    width: 100%;
    text-align: center;
    font-size: 48px;
    color: #00a;
  }

  .result {
    justify-content: center;
    align-items: center;
    width: 12%;
    font-size: 32px;
    color: #333;
  }

  .dice-small {
    @width: 40px;
    height: @width;
    width: @width;
  }

  .help {
    justify-content: center;
    align-items: center;
    @width: 80px;
    width: @width;
    height: @width;
    margin: 0;
    background-color: #fc9d5d;
    color: white;
    font-size: 32px;
    border-radius: 8px;
  }
</style>